/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CobrancaService } from "../cobranca.service";
import { CobrancaCreateInput } from "./CobrancaCreateInput";
import { Cobranca } from "./Cobranca";
import { CobrancaFindManyArgs } from "./CobrancaFindManyArgs";
import { CobrancaWhereUniqueInput } from "./CobrancaWhereUniqueInput";
import { CobrancaUpdateInput } from "./CobrancaUpdateInput";

export class CobrancaControllerBase {
  constructor(protected readonly service: CobrancaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cobranca })
  async createCobranca(
    @common.Body() data: CobrancaCreateInput
  ): Promise<Cobranca> {
    return await this.service.createCobranca({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cobranca] })
  @ApiNestedQuery(CobrancaFindManyArgs)
  async cobrancas(@common.Req() request: Request): Promise<Cobranca[]> {
    const args = plainToClass(CobrancaFindManyArgs, request.query);
    return this.service.cobrancas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cobranca })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cobranca(
    @common.Param() params: CobrancaWhereUniqueInput
  ): Promise<Cobranca | null> {
    const result = await this.service.cobranca({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cobranca })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCobranca(
    @common.Param() params: CobrancaWhereUniqueInput,
    @common.Body() data: CobrancaUpdateInput
  ): Promise<Cobranca | null> {
    try {
      return await this.service.updateCobranca({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cobranca })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCobranca(
    @common.Param() params: CobrancaWhereUniqueInput
  ): Promise<Cobranca | null> {
    try {
      return await this.service.deleteCobranca({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
