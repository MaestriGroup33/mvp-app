/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Cobranca as PrismaCobranca } from "@prisma/client";

export class CobrancaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CobrancaCountArgs, "select">): Promise<number> {
    return this.prisma.cobranca.count(args);
  }

  async cobrancas(
    args: Prisma.CobrancaFindManyArgs
  ): Promise<PrismaCobranca[]> {
    return this.prisma.cobranca.findMany(args);
  }
  async cobranca(
    args: Prisma.CobrancaFindUniqueArgs
  ): Promise<PrismaCobranca | null> {
    return this.prisma.cobranca.findUnique(args);
  }
  async createCobranca(
    args: Prisma.CobrancaCreateArgs
  ): Promise<PrismaCobranca> {
    return this.prisma.cobranca.create(args);
  }
  async updateCobranca(
    args: Prisma.CobrancaUpdateArgs
  ): Promise<PrismaCobranca> {
    return this.prisma.cobranca.update(args);
  }
  async deleteCobranca(
    args: Prisma.CobrancaDeleteArgs
  ): Promise<PrismaCobranca> {
    return this.prisma.cobranca.delete(args);
  }
}
