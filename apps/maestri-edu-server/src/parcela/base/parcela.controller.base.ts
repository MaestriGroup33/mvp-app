/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParcelaService } from "../parcela.service";
import { ParcelaCreateInput } from "./ParcelaCreateInput";
import { Parcela } from "./Parcela";
import { ParcelaFindManyArgs } from "./ParcelaFindManyArgs";
import { ParcelaWhereUniqueInput } from "./ParcelaWhereUniqueInput";
import { ParcelaUpdateInput } from "./ParcelaUpdateInput";

export class ParcelaControllerBase {
  constructor(protected readonly service: ParcelaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Parcela })
  async createParcela(
    @common.Body() data: ParcelaCreateInput
  ): Promise<Parcela> {
    return await this.service.createParcela({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Parcela] })
  @ApiNestedQuery(ParcelaFindManyArgs)
  async parcelas(@common.Req() request: Request): Promise<Parcela[]> {
    const args = plainToClass(ParcelaFindManyArgs, request.query);
    return this.service.parcelas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Parcela })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parcela(
    @common.Param() params: ParcelaWhereUniqueInput
  ): Promise<Parcela | null> {
    const result = await this.service.parcela({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Parcela })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParcela(
    @common.Param() params: ParcelaWhereUniqueInput,
    @common.Body() data: ParcelaUpdateInput
  ): Promise<Parcela | null> {
    try {
      return await this.service.updateParcela({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Parcela })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParcela(
    @common.Param() params: ParcelaWhereUniqueInput
  ): Promise<Parcela | null> {
    try {
      return await this.service.deleteParcela({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
