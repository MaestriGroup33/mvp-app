/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Perfil } from "./Perfil";
import { PerfilCountArgs } from "./PerfilCountArgs";
import { PerfilFindManyArgs } from "./PerfilFindManyArgs";
import { PerfilFindUniqueArgs } from "./PerfilFindUniqueArgs";
import { CreatePerfilArgs } from "./CreatePerfilArgs";
import { UpdatePerfilArgs } from "./UpdatePerfilArgs";
import { DeletePerfilArgs } from "./DeletePerfilArgs";
import { PerfilService } from "../perfil.service";
@graphql.Resolver(() => Perfil)
export class PerfilResolverBase {
  constructor(protected readonly service: PerfilService) {}

  async _perfilsMeta(
    @graphql.Args() args: PerfilCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Perfil])
  async perfils(@graphql.Args() args: PerfilFindManyArgs): Promise<Perfil[]> {
    return this.service.perfils(args);
  }

  @graphql.Query(() => Perfil, { nullable: true })
  async perfil(
    @graphql.Args() args: PerfilFindUniqueArgs
  ): Promise<Perfil | null> {
    const result = await this.service.perfil(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Perfil)
  async createPerfil(@graphql.Args() args: CreatePerfilArgs): Promise<Perfil> {
    return await this.service.createPerfil({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Perfil)
  async updatePerfil(
    @graphql.Args() args: UpdatePerfilArgs
  ): Promise<Perfil | null> {
    try {
      return await this.service.updatePerfil({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Perfil)
  async deletePerfil(
    @graphql.Args() args: DeletePerfilArgs
  ): Promise<Perfil | null> {
    try {
      return await this.service.deletePerfil(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
