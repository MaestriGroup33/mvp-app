/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerfilService } from "../perfil.service";
import { PerfilCreateInput } from "./PerfilCreateInput";
import { Perfil } from "./Perfil";
import { PerfilFindManyArgs } from "./PerfilFindManyArgs";
import { PerfilWhereUniqueInput } from "./PerfilWhereUniqueInput";
import { PerfilUpdateInput } from "./PerfilUpdateInput";

export class PerfilControllerBase {
  constructor(protected readonly service: PerfilService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Perfil })
  async createPerfil(@common.Body() data: PerfilCreateInput): Promise<Perfil> {
    return await this.service.createPerfil({
      data: data,
      select: {
        cpf: true,
        createdAt: true,
        id: true,
        numeroCelular: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Perfil] })
  @ApiNestedQuery(PerfilFindManyArgs)
  async perfils(@common.Req() request: Request): Promise<Perfil[]> {
    const args = plainToClass(PerfilFindManyArgs, request.query);
    return this.service.perfils({
      ...args,
      select: {
        cpf: true,
        createdAt: true,
        id: true,
        numeroCelular: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Perfil })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async perfil(
    @common.Param() params: PerfilWhereUniqueInput
  ): Promise<Perfil | null> {
    const result = await this.service.perfil({
      where: params,
      select: {
        cpf: true,
        createdAt: true,
        id: true,
        numeroCelular: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Perfil })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerfil(
    @common.Param() params: PerfilWhereUniqueInput,
    @common.Body() data: PerfilUpdateInput
  ): Promise<Perfil | null> {
    try {
      return await this.service.updatePerfil({
        where: params,
        data: data,
        select: {
          cpf: true,
          createdAt: true,
          id: true,
          numeroCelular: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Perfil })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerfil(
    @common.Param() params: PerfilWhereUniqueInput
  ): Promise<Perfil | null> {
    try {
      return await this.service.deletePerfil({
        where: params,
        select: {
          cpf: true,
          createdAt: true,
          id: true,
          numeroCelular: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
