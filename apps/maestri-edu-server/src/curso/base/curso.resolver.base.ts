/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Curso } from "./Curso";
import { CursoCountArgs } from "./CursoCountArgs";
import { CursoFindManyArgs } from "./CursoFindManyArgs";
import { CursoFindUniqueArgs } from "./CursoFindUniqueArgs";
import { CreateCursoArgs } from "./CreateCursoArgs";
import { UpdateCursoArgs } from "./UpdateCursoArgs";
import { DeleteCursoArgs } from "./DeleteCursoArgs";
import { MatriculaFindManyArgs } from "../../matricula/base/MatriculaFindManyArgs";
import { Matricula } from "../../matricula/base/Matricula";
import { CursoService } from "../curso.service";
@graphql.Resolver(() => Curso)
export class CursoResolverBase {
  constructor(protected readonly service: CursoService) {}

  async _cursosMeta(
    @graphql.Args() args: CursoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Curso])
  async cursos(@graphql.Args() args: CursoFindManyArgs): Promise<Curso[]> {
    return this.service.cursos(args);
  }

  @graphql.Query(() => Curso, { nullable: true })
  async curso(
    @graphql.Args() args: CursoFindUniqueArgs
  ): Promise<Curso | null> {
    const result = await this.service.curso(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Curso)
  async createCurso(@graphql.Args() args: CreateCursoArgs): Promise<Curso> {
    return await this.service.createCurso({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Curso)
  async updateCurso(
    @graphql.Args() args: UpdateCursoArgs
  ): Promise<Curso | null> {
    try {
      return await this.service.updateCurso({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Curso)
  async deleteCurso(
    @graphql.Args() args: DeleteCursoArgs
  ): Promise<Curso | null> {
    try {
      return await this.service.deleteCurso(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Matricula], { name: "matriculas" })
  async findMatriculas(
    @graphql.Parent() parent: Curso,
    @graphql.Args() args: MatriculaFindManyArgs
  ): Promise<Matricula[]> {
    const results = await this.service.findMatriculas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
