/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Matricula as PrismaMatricula,
  Curso as PrismaCurso,
} from "@prisma/client";

export class MatriculaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MatriculaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.matricula.count(args);
  }

  async matriculas(
    args: Prisma.MatriculaFindManyArgs
  ): Promise<PrismaMatricula[]> {
    return this.prisma.matricula.findMany(args);
  }
  async matricula(
    args: Prisma.MatriculaFindUniqueArgs
  ): Promise<PrismaMatricula | null> {
    return this.prisma.matricula.findUnique(args);
  }
  async createMatricula(
    args: Prisma.MatriculaCreateArgs
  ): Promise<PrismaMatricula> {
    return this.prisma.matricula.create(args);
  }
  async updateMatricula(
    args: Prisma.MatriculaUpdateArgs
  ): Promise<PrismaMatricula> {
    return this.prisma.matricula.update(args);
  }
  async deleteMatricula(
    args: Prisma.MatriculaDeleteArgs
  ): Promise<PrismaMatricula> {
    return this.prisma.matricula.delete(args);
  }

  async getCurso(parentId: string): Promise<PrismaCurso | null> {
    return this.prisma.matricula
      .findUnique({
        where: { id: parentId },
      })
      .curso();
  }
}
