/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MatriculaService } from "../matricula.service";
import { MatriculaCreateInput } from "./MatriculaCreateInput";
import { Matricula } from "./Matricula";
import { MatriculaFindManyArgs } from "./MatriculaFindManyArgs";
import { MatriculaWhereUniqueInput } from "./MatriculaWhereUniqueInput";
import { MatriculaUpdateInput } from "./MatriculaUpdateInput";

export class MatriculaControllerBase {
  constructor(protected readonly service: MatriculaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Matricula })
  async createMatricula(
    @common.Body() data: MatriculaCreateInput
  ): Promise<Matricula> {
    return await this.service.createMatricula({
      data: {
        ...data,

        curso: data.curso
          ? {
              connect: data.curso,
            }
          : undefined,
      },
      select: {
        aluno: true,
        alunoId: true,
        alunoReferencia: true,
        classificacaoReferencia: true,
        createdAt: true,

        curso: {
          select: {
            id: true,
          },
        },

        cursoReferencia: true,
        id: true,
        numeroParcelas: true,
        parcelaAdimplente: true,
        parcelaAdimplenteId: true,
        parcelaAdimplenteReferencia: true,
        promotor: true,
        promotorId: true,
        promotorReferencia: true,
        status: true,
        statusMatricula: true,
        taxaMatricula: true,
        taxaMatriculaId: true,
        taxaMatriculaReferencia: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Matricula] })
  @ApiNestedQuery(MatriculaFindManyArgs)
  async matriculas(@common.Req() request: Request): Promise<Matricula[]> {
    const args = plainToClass(MatriculaFindManyArgs, request.query);
    return this.service.matriculas({
      ...args,
      select: {
        aluno: true,
        alunoId: true,
        alunoReferencia: true,
        classificacaoReferencia: true,
        createdAt: true,

        curso: {
          select: {
            id: true,
          },
        },

        cursoReferencia: true,
        id: true,
        numeroParcelas: true,
        parcelaAdimplente: true,
        parcelaAdimplenteId: true,
        parcelaAdimplenteReferencia: true,
        promotor: true,
        promotorId: true,
        promotorReferencia: true,
        status: true,
        statusMatricula: true,
        taxaMatricula: true,
        taxaMatriculaId: true,
        taxaMatriculaReferencia: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Matricula })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async matricula(
    @common.Param() params: MatriculaWhereUniqueInput
  ): Promise<Matricula | null> {
    const result = await this.service.matricula({
      where: params,
      select: {
        aluno: true,
        alunoId: true,
        alunoReferencia: true,
        classificacaoReferencia: true,
        createdAt: true,

        curso: {
          select: {
            id: true,
          },
        },

        cursoReferencia: true,
        id: true,
        numeroParcelas: true,
        parcelaAdimplente: true,
        parcelaAdimplenteId: true,
        parcelaAdimplenteReferencia: true,
        promotor: true,
        promotorId: true,
        promotorReferencia: true,
        status: true,
        statusMatricula: true,
        taxaMatricula: true,
        taxaMatriculaId: true,
        taxaMatriculaReferencia: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Matricula })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMatricula(
    @common.Param() params: MatriculaWhereUniqueInput,
    @common.Body() data: MatriculaUpdateInput
  ): Promise<Matricula | null> {
    try {
      return await this.service.updateMatricula({
        where: params,
        data: {
          ...data,

          curso: data.curso
            ? {
                connect: data.curso,
              }
            : undefined,
        },
        select: {
          aluno: true,
          alunoId: true,
          alunoReferencia: true,
          classificacaoReferencia: true,
          createdAt: true,

          curso: {
            select: {
              id: true,
            },
          },

          cursoReferencia: true,
          id: true,
          numeroParcelas: true,
          parcelaAdimplente: true,
          parcelaAdimplenteId: true,
          parcelaAdimplenteReferencia: true,
          promotor: true,
          promotorId: true,
          promotorReferencia: true,
          status: true,
          statusMatricula: true,
          taxaMatricula: true,
          taxaMatriculaId: true,
          taxaMatriculaReferencia: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Matricula })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMatricula(
    @common.Param() params: MatriculaWhereUniqueInput
  ): Promise<Matricula | null> {
    try {
      return await this.service.deleteMatricula({
        where: params,
        select: {
          aluno: true,
          alunoId: true,
          alunoReferencia: true,
          classificacaoReferencia: true,
          createdAt: true,

          curso: {
            select: {
              id: true,
            },
          },

          cursoReferencia: true,
          id: true,
          numeroParcelas: true,
          parcelaAdimplente: true,
          parcelaAdimplenteId: true,
          parcelaAdimplenteReferencia: true,
          promotor: true,
          promotorId: true,
          promotorReferencia: true,
          status: true,
          statusMatricula: true,
          taxaMatricula: true,
          taxaMatriculaId: true,
          taxaMatriculaReferencia: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
