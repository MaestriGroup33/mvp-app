/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Matricula } from "./Matricula";
import { MatriculaCountArgs } from "./MatriculaCountArgs";
import { MatriculaFindManyArgs } from "./MatriculaFindManyArgs";
import { MatriculaFindUniqueArgs } from "./MatriculaFindUniqueArgs";
import { CreateMatriculaArgs } from "./CreateMatriculaArgs";
import { UpdateMatriculaArgs } from "./UpdateMatriculaArgs";
import { DeleteMatriculaArgs } from "./DeleteMatriculaArgs";
import { Curso } from "../../curso/base/Curso";
import { MatriculaService } from "../matricula.service";
@graphql.Resolver(() => Matricula)
export class MatriculaResolverBase {
  constructor(protected readonly service: MatriculaService) {}

  async _matriculasMeta(
    @graphql.Args() args: MatriculaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Matricula])
  async matriculas(
    @graphql.Args() args: MatriculaFindManyArgs
  ): Promise<Matricula[]> {
    return this.service.matriculas(args);
  }

  @graphql.Query(() => Matricula, { nullable: true })
  async matricula(
    @graphql.Args() args: MatriculaFindUniqueArgs
  ): Promise<Matricula | null> {
    const result = await this.service.matricula(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Matricula)
  async createMatricula(
    @graphql.Args() args: CreateMatriculaArgs
  ): Promise<Matricula> {
    return await this.service.createMatricula({
      ...args,
      data: {
        ...args.data,

        curso: args.data.curso
          ? {
              connect: args.data.curso,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Matricula)
  async updateMatricula(
    @graphql.Args() args: UpdateMatriculaArgs
  ): Promise<Matricula | null> {
    try {
      return await this.service.updateMatricula({
        ...args,
        data: {
          ...args.data,

          curso: args.data.curso
            ? {
                connect: args.data.curso,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Matricula)
  async deleteMatricula(
    @graphql.Args() args: DeleteMatriculaArgs
  ): Promise<Matricula | null> {
    try {
      return await this.service.deleteMatricula(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Curso, {
    nullable: true,
    name: "curso",
  })
  async getCurso(@graphql.Parent() parent: Matricula): Promise<Curso | null> {
    const result = await this.service.getCurso(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
