/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Banking } from "./Banking";
import { BankingCountArgs } from "./BankingCountArgs";
import { BankingFindManyArgs } from "./BankingFindManyArgs";
import { BankingFindUniqueArgs } from "./BankingFindUniqueArgs";
import { CreateBankingArgs } from "./CreateBankingArgs";
import { UpdateBankingArgs } from "./UpdateBankingArgs";
import { DeleteBankingArgs } from "./DeleteBankingArgs";
import { BankingService } from "../banking.service";
@graphql.Resolver(() => Banking)
export class BankingResolverBase {
  constructor(protected readonly service: BankingService) {}

  async _bankingsMeta(
    @graphql.Args() args: BankingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Banking])
  async bankings(
    @graphql.Args() args: BankingFindManyArgs
  ): Promise<Banking[]> {
    return this.service.bankings(args);
  }

  @graphql.Query(() => Banking, { nullable: true })
  async banking(
    @graphql.Args() args: BankingFindUniqueArgs
  ): Promise<Banking | null> {
    const result = await this.service.banking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Banking)
  async createBanking(
    @graphql.Args() args: CreateBankingArgs
  ): Promise<Banking> {
    return await this.service.createBanking({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Banking)
  async updateBanking(
    @graphql.Args() args: UpdateBankingArgs
  ): Promise<Banking | null> {
    try {
      return await this.service.updateBanking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Banking)
  async deleteBanking(
    @graphql.Args() args: DeleteBankingArgs
  ): Promise<Banking | null> {
    try {
      return await this.service.deleteBanking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
