/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankingService } from "../banking.service";
import { BankingCreateInput } from "./BankingCreateInput";
import { Banking } from "./Banking";
import { BankingFindManyArgs } from "./BankingFindManyArgs";
import { BankingWhereUniqueInput } from "./BankingWhereUniqueInput";
import { BankingUpdateInput } from "./BankingUpdateInput";

export class BankingControllerBase {
  constructor(protected readonly service: BankingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Banking })
  async createBanking(
    @common.Body() data: BankingCreateInput
  ): Promise<Banking> {
    return await this.service.createBanking({
      data: data,
      select: {
        createdAt: true,
        descricaoi: true,
        id: true,
        idConvenio: true,
        movimentaO: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Banking] })
  @ApiNestedQuery(BankingFindManyArgs)
  async bankings(@common.Req() request: Request): Promise<Banking[]> {
    const args = plainToClass(BankingFindManyArgs, request.query);
    return this.service.bankings({
      ...args,
      select: {
        createdAt: true,
        descricaoi: true,
        id: true,
        idConvenio: true,
        movimentaO: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Banking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async banking(
    @common.Param() params: BankingWhereUniqueInput
  ): Promise<Banking | null> {
    const result = await this.service.banking({
      where: params,
      select: {
        createdAt: true,
        descricaoi: true,
        id: true,
        idConvenio: true,
        movimentaO: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Banking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBanking(
    @common.Param() params: BankingWhereUniqueInput,
    @common.Body() data: BankingUpdateInput
  ): Promise<Banking | null> {
    try {
      return await this.service.updateBanking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          descricaoi: true,
          id: true,
          idConvenio: true,
          movimentaO: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Banking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBanking(
    @common.Param() params: BankingWhereUniqueInput
  ): Promise<Banking | null> {
    try {
      return await this.service.deleteBanking({
        where: params,
        select: {
          createdAt: true,
          descricaoi: true,
          id: true,
          idConvenio: true,
          movimentaO: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
