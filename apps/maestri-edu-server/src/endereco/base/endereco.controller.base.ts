/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnderecoService } from "../endereco.service";
import { EnderecoCreateInput } from "./EnderecoCreateInput";
import { Endereco } from "./Endereco";
import { EnderecoFindManyArgs } from "./EnderecoFindManyArgs";
import { EnderecoWhereUniqueInput } from "./EnderecoWhereUniqueInput";
import { EnderecoUpdateInput } from "./EnderecoUpdateInput";

export class EnderecoControllerBase {
  constructor(protected readonly service: EnderecoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Endereco })
  async createEndereco(
    @common.Body() data: EnderecoCreateInput
  ): Promise<Endereco> {
    return await this.service.createEndereco({
      data: data,
      select: {
        createdAt: true,
        id: true,
        perfilReferencia: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Endereco] })
  @ApiNestedQuery(EnderecoFindManyArgs)
  async enderecos(@common.Req() request: Request): Promise<Endereco[]> {
    const args = plainToClass(EnderecoFindManyArgs, request.query);
    return this.service.enderecos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        perfilReferencia: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Endereco })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async endereco(
    @common.Param() params: EnderecoWhereUniqueInput
  ): Promise<Endereco | null> {
    const result = await this.service.endereco({
      where: params,
      select: {
        createdAt: true,
        id: true,
        perfilReferencia: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Endereco })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEndereco(
    @common.Param() params: EnderecoWhereUniqueInput,
    @common.Body() data: EnderecoUpdateInput
  ): Promise<Endereco | null> {
    try {
      return await this.service.updateEndereco({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          perfilReferencia: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Endereco })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEndereco(
    @common.Param() params: EnderecoWhereUniqueInput
  ): Promise<Endereco | null> {
    try {
      return await this.service.deleteEndereco({
        where: params,
        select: {
          createdAt: true,
          id: true,
          perfilReferencia: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
