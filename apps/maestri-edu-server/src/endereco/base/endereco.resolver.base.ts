/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Endereco } from "./Endereco";
import { EnderecoCountArgs } from "./EnderecoCountArgs";
import { EnderecoFindManyArgs } from "./EnderecoFindManyArgs";
import { EnderecoFindUniqueArgs } from "./EnderecoFindUniqueArgs";
import { CreateEnderecoArgs } from "./CreateEnderecoArgs";
import { UpdateEnderecoArgs } from "./UpdateEnderecoArgs";
import { DeleteEnderecoArgs } from "./DeleteEnderecoArgs";
import { EnderecoService } from "../endereco.service";
@graphql.Resolver(() => Endereco)
export class EnderecoResolverBase {
  constructor(protected readonly service: EnderecoService) {}

  async _enderecosMeta(
    @graphql.Args() args: EnderecoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Endereco])
  async enderecos(
    @graphql.Args() args: EnderecoFindManyArgs
  ): Promise<Endereco[]> {
    return this.service.enderecos(args);
  }

  @graphql.Query(() => Endereco, { nullable: true })
  async endereco(
    @graphql.Args() args: EnderecoFindUniqueArgs
  ): Promise<Endereco | null> {
    const result = await this.service.endereco(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Endereco)
  async createEndereco(
    @graphql.Args() args: CreateEnderecoArgs
  ): Promise<Endereco> {
    return await this.service.createEndereco({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Endereco)
  async updateEndereco(
    @graphql.Args() args: UpdateEnderecoArgs
  ): Promise<Endereco | null> {
    try {
      return await this.service.updateEndereco({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Endereco)
  async deleteEndereco(
    @graphql.Args() args: DeleteEnderecoArgs
  ): Promise<Endereco | null> {
    try {
      return await this.service.deleteEndereco(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
