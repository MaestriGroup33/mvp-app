/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClassificacaoService } from "../classificacao.service";
import { ClassificacaoCreateInput } from "./ClassificacaoCreateInput";
import { Classificacao } from "./Classificacao";
import { ClassificacaoFindManyArgs } from "./ClassificacaoFindManyArgs";
import { ClassificacaoWhereUniqueInput } from "./ClassificacaoWhereUniqueInput";
import { ClassificacaoUpdateInput } from "./ClassificacaoUpdateInput";

export class ClassificacaoControllerBase {
  constructor(protected readonly service: ClassificacaoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Classificacao })
  async createClassificacao(
    @common.Body() data: ClassificacaoCreateInput
  ): Promise<Classificacao> {
    return await this.service.createClassificacao({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Classificacao] })
  @ApiNestedQuery(ClassificacaoFindManyArgs)
  async classificacaos(
    @common.Req() request: Request
  ): Promise<Classificacao[]> {
    const args = plainToClass(ClassificacaoFindManyArgs, request.query);
    return this.service.classificacaos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Classificacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async classificacao(
    @common.Param() params: ClassificacaoWhereUniqueInput
  ): Promise<Classificacao | null> {
    const result = await this.service.classificacao({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Classificacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClassificacao(
    @common.Param() params: ClassificacaoWhereUniqueInput,
    @common.Body() data: ClassificacaoUpdateInput
  ): Promise<Classificacao | null> {
    try {
      return await this.service.updateClassificacao({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Classificacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClassificacao(
    @common.Param() params: ClassificacaoWhereUniqueInput
  ): Promise<Classificacao | null> {
    try {
      return await this.service.deleteClassificacao({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
