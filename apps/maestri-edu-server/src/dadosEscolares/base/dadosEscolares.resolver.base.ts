/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DadosEscolares } from "./DadosEscolares";
import { DadosEscolaresCountArgs } from "./DadosEscolaresCountArgs";
import { DadosEscolaresFindManyArgs } from "./DadosEscolaresFindManyArgs";
import { DadosEscolaresFindUniqueArgs } from "./DadosEscolaresFindUniqueArgs";
import { CreateDadosEscolaresArgs } from "./CreateDadosEscolaresArgs";
import { UpdateDadosEscolaresArgs } from "./UpdateDadosEscolaresArgs";
import { DeleteDadosEscolaresArgs } from "./DeleteDadosEscolaresArgs";
import { DadosEscolaresService } from "../dadosEscolares.service";
@graphql.Resolver(() => DadosEscolares)
export class DadosEscolaresResolverBase {
  constructor(protected readonly service: DadosEscolaresService) {}

  async _dadosEscolaresItemsMeta(
    @graphql.Args() args: DadosEscolaresCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DadosEscolares])
  async dadosEscolaresItems(
    @graphql.Args() args: DadosEscolaresFindManyArgs
  ): Promise<DadosEscolares[]> {
    return this.service.dadosEscolaresItems(args);
  }

  @graphql.Query(() => DadosEscolares, { nullable: true })
  async dadosEscolares(
    @graphql.Args() args: DadosEscolaresFindUniqueArgs
  ): Promise<DadosEscolares | null> {
    const result = await this.service.dadosEscolares(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DadosEscolares)
  async createDadosEscolares(
    @graphql.Args() args: CreateDadosEscolaresArgs
  ): Promise<DadosEscolares> {
    return await this.service.createDadosEscolares({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DadosEscolares)
  async updateDadosEscolares(
    @graphql.Args() args: UpdateDadosEscolaresArgs
  ): Promise<DadosEscolares | null> {
    try {
      return await this.service.updateDadosEscolares({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DadosEscolares)
  async deleteDadosEscolares(
    @graphql.Args() args: DeleteDadosEscolaresArgs
  ): Promise<DadosEscolares | null> {
    try {
      return await this.service.deleteDadosEscolares(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
