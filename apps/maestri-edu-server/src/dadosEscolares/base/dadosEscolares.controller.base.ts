/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DadosEscolaresService } from "../dadosEscolares.service";
import { DadosEscolaresCreateInput } from "./DadosEscolaresCreateInput";
import { DadosEscolares } from "./DadosEscolares";
import { DadosEscolaresFindManyArgs } from "./DadosEscolaresFindManyArgs";
import { DadosEscolaresWhereUniqueInput } from "./DadosEscolaresWhereUniqueInput";
import { DadosEscolaresUpdateInput } from "./DadosEscolaresUpdateInput";

export class DadosEscolaresControllerBase {
  constructor(protected readonly service: DadosEscolaresService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DadosEscolares })
  async createDadosEscolares(
    @common.Body() data: DadosEscolaresCreateInput
  ): Promise<DadosEscolares> {
    return await this.service.createDadosEscolares({
      data: data,
      select: {
        createdAt: true,
        id: true,
        perfilReferencia: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DadosEscolares] })
  @ApiNestedQuery(DadosEscolaresFindManyArgs)
  async dadosEscolaresItems(
    @common.Req() request: Request
  ): Promise<DadosEscolares[]> {
    const args = plainToClass(DadosEscolaresFindManyArgs, request.query);
    return this.service.dadosEscolaresItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        perfilReferencia: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DadosEscolares })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dadosEscolares(
    @common.Param() params: DadosEscolaresWhereUniqueInput
  ): Promise<DadosEscolares | null> {
    const result = await this.service.dadosEscolares({
      where: params,
      select: {
        createdAt: true,
        id: true,
        perfilReferencia: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DadosEscolares })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDadosEscolares(
    @common.Param() params: DadosEscolaresWhereUniqueInput,
    @common.Body() data: DadosEscolaresUpdateInput
  ): Promise<DadosEscolares | null> {
    try {
      return await this.service.updateDadosEscolares({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          perfilReferencia: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DadosEscolares })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDadosEscolares(
    @common.Param() params: DadosEscolaresWhereUniqueInput
  ): Promise<DadosEscolares | null> {
    try {
      return await this.service.deleteDadosEscolares({
        where: params,
        select: {
          createdAt: true,
          id: true,
          perfilReferencia: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
